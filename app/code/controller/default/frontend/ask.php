<?phpif (isset($_GET["antispam"]) AND $_GET["antispam"] == "img") {	PageEngine::runController("ask_antispam");}if (isset($_POST["action"]) AND $_POST["action"] == "preview") {	$wiky = new wiky();	$out = array();	$out["html"] = $wiky->parse($_POST["text"]);	echo(json_encode($out));	exit(1);}if (isset($_POST["action"]) AND $_POST["action"] == "possiblequestions") {	$db = new SQL(0);	$rows = $db->cmdrows(0, 'SELECT *,MATCH (title,question,tags) AGAINST ("{0}") as Score FROM questions WHERE MATCH (title,question,tags) AGAINST ("{0}") ORDER BY Score DESC LIMIT 0,10', array($_POST["q"]));	echo('<div><b>Schon gestellte ähnliche Fragen...</b><ul style="list-style:none;">');	foreach ($rows as $row) {		echo('<li><a href="'.Question::PermalinkByData($row["id"],$row["title"]).'">'.html($row["title"]).'</a></li>');	}	echo('</ul></div>');	exit(1);}if (isset($_POST["action"]) AND $_POST["action"] == "save") {	$db = new SQL(0);	$j = true;	$tags = array();		if (!MyUser::isloggedin()) {		if (!isset($_POST["antispam"]) OR $_POST["antispam"]."" == "") { PageEngine::AddErrorMessage("AnswerNew","Bitte lesen Sie die Buchstaben unten im Antispam!"); $j = false; }		if (!isset($_SESSION["antispam0"]) OR !isset($_POST["antispam"]) OR $_SESSION["antispam0"] != $_POST["antispam"]) { PageEngine::AddErrorMessage("AnswerNew", "Ungültiger Antispam. Bitte lies nochmal genau!"); $j = false; }	}	if (strlen(trim($_POST["title"])) < 10) {PageEngine::AddErrorMessage("save", "Dein Titel ist zu kurz"); $j = false;}	if (strlen(trim($_POST["title"])) > 200) {PageEngine::AddErrorMessage("save", "Dein Titel ist zu lang"); $j = false;}	if (strlen(trim($_POST["text"])) < 10) { PageEngine::AddErrorMessage("save", "Bitte schreibe Deine Frage nochmal ausführlicher in der Beschreibung"); $j = false;}		if ($j) {		$w = array();		$w["title"] = trim($_POST["title"]);		$w["question"] = $_POST["text"];		$w["tags"] = implode(",", tags2array($_POST["tags"]));		$w["date_created"] = time();		$w["date_edited"] = time();		$w["date_action"] = time();		$w["user_action"] = MyUser::id()+0;		if (!MyUser::isloggedin()) $w["author"] = -1;		elseif (isset($_POST["wiki"]) AND $_POST["wiki"] == "1") { $w["author"] = -2; }		elseif (isset($_POST["ask_anonymously"]) AND $_POST["ask_anonymously"] == "1") { $w["author"] = MyUser::id(); $w["is_anonymous"] = "1"; }		else $w["author"] = MyUser::id();		$db->Create(0, 'questions', $w);		$frageid = $db->LastInsertKey();				if (!isset($_GET["tag"])) $_GET["tag"] = "";		$g = explode(",", $_GET["tag"].",".$_POST["tags"]);		foreach (tags2array($_POST["tags"]) as $a) {			if (trim($a) == "") continue;			$w3 =array();			$w3["question"] = $frageid;			$w3["tag"] = $a;			$db->CreateUpdate(0, "question_tags", $w3);		}				$_SESSION["myuser"]["lastwritten"]["question"][$frageid] = true;		Karma::RuleAction("CREATE_QUESTION", array("user" => MyUser::id(), "question" => $frageid));		Badges::add(3, MyUser::id(), array("question" => $frageid)); //Erste Frage geschrieben				@file_get_contents("www.google.com/webmasters/tools/ping?sitemap=".urlencode(SiteConfig::val("baseurl")."sitemap.xml"));				$m = SiteConfig::get(0);		if ($m["twitter"]["consumer"]["secret"]."" != "" && $m["twitter"]["access"]["secret"]."" != "") {			try {			$twitter = new Twitter($m["twitter"]["consumer"]["key"], $m["twitter"]["consumer"]["secret"]);			$twitter->setOAuthToken($m["twitter"]["access"]["key"]);			$twitter->setOAuthTokenSecret($m["twitter"]["access"]["secret"]);			$url = API_urlshortener::add(Question::PermalinkByData($w3["question"],$w["title"]));			if (strlen($w["title"])>100) $tweet = substr($w["title"],0,100)."... ".$url." #wikihelp";			else $tweet = substr($w["title"],0,100)." ".$url." #wikihelp";			$twitter->statusesUpdate($tweet);			} catch (Exception $ex) {}		}				header("Location: ".Question::PermalinkByData($frageid));	}}function tags2array($text) {	$g = explode("," ,$text);	$out = array();	for ($i = 0; $i < min(5, count($g)); $i++) $out[] = trim(strtolower($g[$i]));	return $out;}